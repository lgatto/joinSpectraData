% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/joinSpectraData.R
\name{joinSpectraData}
\alias{joinSpectraData}
\title{Join Spectra Data}
\usage{
joinSpectraData(
  object,
  y,
  by.x = "spectrumId",
  by.y = NULL,
  key = "spectrumId"
)
}
\arguments{
\item{object}{A \code{\link[=Spectra]{Spectra()}} object.}

\item{y}{A \code{DataFrame} with spectra data to be merged with
\code{spectraData(object)}.}

\item{by.x}{by.x Specification of the columns used for merging. See
\code{base::merge()} for details. Default is \code{"spectrumId"}.}

\item{by.y}{by.y Specification of the columns used for merging. See
\code{base::merge()} for details.}

\item{key}{A \code{character(1)} used to match the merged spectra data
back to the spectra. Default is \code{"spectrumId"}.}
}
\description{
Individual spectra data variable can be directly added with the
\verb{$<-} syntax (see examples below).

The \code{joinSpectraData()} function allows to merge a \code{DataFrame} to
the existing spectra data. It works like the \code{base::merge()}
function: the \code{by.x} (default is \code{"spectrumId"}) and \code{by.y}
arguments define the variable names in the current spectra data and
the news \code{DataFrame}. In addition, the \code{key} argument (default is
also \code{"spectrumId"}) is used the match the merged spectra data to
the original spectra.

For details and background:
\itemize{
\item https://github.com/rformassspectrometry/Spectra/issues/149
\item https://github.com/Bioconductor/S4Vectors/issues/73
}
}
\examples{

library("Spectra")
library("msdata")
library("magrittr")
library("PSM")

ms <- Spectra(msdata::proteomics(pattern = "2014", full.names = TRUE)) \%>\%
    filterMsLevel(2L) \%>\%
    dropNaSpectraVariables()

id <- readPSMs(msdata::ident(full.names = TRUE)) \%>\%
    filterPSMs()
id$modLocation <- NULL
id <- unique(id)

ms <- joinSpectraData(ms, id,
                      by.x = "spectrumId",
                      by.y = "spectrumID")
}
\author{
Laurent Gatto. Code of \code{joinSpectraData:::mergeDFrame()}
based on \verb{base::merge,data.frame,data.frame}.
}
